"""
Django settings for crm project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from decouple import config



# import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG")

# ALLOWED_HOSTS = config('ALLOWED_HOSTS', 'flyibatcrm.fly.dev,127.0.0.1,crm-quiet-hill-1806.fly.dev').split(',')

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'flyibatcrm.fly.dev,127.0.0.1').split(',')



CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="").split(",")  # Configures trusted origins for CSRF protection.


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_select2',
    'widget_tweaks',
    "dashboard",
    "core",
    "contacts",
    "compressor",
    "clientportal",
    "django_extensions",
    "settings",
    "segments",
    "users",
]

MIDDLEWARE = [
    "core.middleware.maintenance_middleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.RoleBasedAccessMiddleware",


]


ROOT_URLCONF = "crm.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.user_roles",
            ],
        },
    },
]

WSGI_APPLICATION = "crm.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

if config("USE_SQLITE"):  # Determines whether to use SQLite.
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",  # SQLite database engine.
            "NAME": BASE_DIR / "db.sqlite3",  # SQLite database file path.
        }
    }
else:  # PostgreSQL configuration for production.
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",  # PostgreSQL database engine.
            "NAME": config("DATABASE_NAME"),  # Database name from environment.
            "USER": config("DATABASE_USER"),  # Database username from environment.
            "PASSWORD": config("DATABASE_PASSWORD"),  # Database password from environment.
            "HOST": config("DATABASE_HOST"),  # Database host from environment.
            "PORT": config("DATABASE_PORT"),  # Database port from environment.
        }
    }
    # DATABASES = {
    #     'default': {
    #         "default": env.db()
    #     }
    # }
   





AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]





# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Path to your static directory for Tailwind
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


# If you're using Django Compressor
COMPRESS_ROOT = BASE_DIR / 'static'
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True  # Enables offline compression for production.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)


MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = '/login/'  # Redirect to /accounts/login/ when login is required
LOGIN_REDIRECT_URL = '/'  # Redirect to home page or another page after successful login


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = config("TIME_ZONE")  # Timezone, configurable via environment variables.

USE_I18N = True

USE_TZ = True
# settings.py
# USE_TZ = True
TIME_ZONE = 'Etc/GMT-1'  # or 'Etc/GMT-1' for GMT+1 without DST
