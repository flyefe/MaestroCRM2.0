CRM/                      # Project Root
│
├── CRM/                 # Project Settings
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py          # Project URL configurations
│   ├── wsgi.py
│   └── asgi.py
│
├── core/                # Core app for home and non-secured pages
│   ├── migrations/
│   ├── templates/
│   │   └── core/
│   │       └── home.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py          # URL configurations for core app
│   └── views.py
│
├── user/                # User management app for staff
│   ├── migrations/
│   ├── templates/
│   │   └── user/
│   │       ├── user_list.html
│   │       ├── edit_user.html
│   │       └── register.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py         # Forms for user registration, editing, etc.
│   ├── models.py        # User models if extending default User model
│   ├── tests.py
│   ├── urls.py          # URL configurations for user app
│   └── views.py
│
├── contacts/            # Contacts management app
│   ├── migrations/
│   ├── templates/
│   │   └── contacts/
│   │       ├── contact_list.html
│   │       ├── edit_contact.html
│   │       └── add_contact.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py         # Forms for contact management
│   ├── models.py
│   ├── tests.py
│   ├── urls.py          # URL configurations for contacts app
│   └── views.py
│
├── dashboard/           # Dashboard functionality app
│   ├── migrations/
│   ├── templates/
│   │   └── dashboard/
│   │       └── dashboard.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py          # URL configurations for dashboard app
│   └── views.py
│
└── client_portal/       # Client portal app
    ├── migrations/
    ├── templates/
    │   └── client_portal/
    │       ├── client_dashboard.html
    │       └── login.html
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── forms.py         # Forms for client login, etc.
    ├── models.py        # Models for client data if needed
    ├── tests.py
    ├── urls.py          # URL configurations for client portal app
    └── views.py




MaestroCRM2.0/                # Root project directory
│── core/                     # Core functionalities (middleware, utilities, base models)
│   ├── middleware.py         # Custom middleware (e.g., RoleBasedAccessMiddleware, maintenance)
│   ├── models.py             # Core models (possibly including Feature model)
│   ├── utils.py              # Utility functions (e.g., checking if features are active)
│   ├── views.py              # Core views
│   ├── urls.py               # Core URL configurations
│   ├── __init__.py           # Marks core as a Python package
│
│── dashboard/                # Dashboard-related functionality
│   ├── templates/            # Templates for the dashboard UI
│   ├── views.py              # Views for the dashboard
│   ├── urls.py               # URL routing for the dashboard
│   ├── __init__.py
│
│── contacts/                 # Contacts management
│   ├── api/                  # API-related code (Django Rest Framework views)
│   ├── models.py             # Contact model
│   ├── views.py              # Contact views
│   ├── serializers.py        # DRF Serializers for Contact API
│   ├── urls.py               # Contact URL configurations
│   ├── __init__.py
│
│── clientportal/             # Client portal functionality
│   ├── templates/
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── segments/                 # Segmentation system (if active)
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── users/                    # User management and authentication
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── inventory/                # Inventory management (if active)
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── invoicing/                # Invoice generation (if active)
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── accounting/               # Accounting system (if active)
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── visitors/                 # Visitors management system (if active)
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── __init__.py
│
│── settings/                 # Project settings (possibly modularized)
│   ├── base.py               # Base settings for the project
│   ├── dev.py                # Development settings
│   ├── prod.py               # Production settings
│   ├── __init__.py
│
│── crm/                      # Main project configuration
│   ├── settings.py           # Django settings file
│   ├── urls.py               # Project-wide URL configurations
│   ├── wsgi.py               # WSGI entry point for the project
│   ├── asgi.py               # ASGI entry point for async applications
│   ├── __init__.py
│
│── templates/                # Global templates
│── static/                   # Global static files (CSS, JS)
│── manage.py                 # Django management script
│── requirements.txt          # Python dependencies
│── .venv/                    # Virtual environment (if created locally)



-DONE Make it possible for users to register
-DONE Make form to add/create roles/groups
-DONE Make it possible to edit/Update groups
-DONE Make it possible to delet group
-DONE Make it possible to edit users roles
- DONE make it possible to delete user


-DONE Create status Table (new group)
    -DONE Make it possible to know number of persons in status

-DONE Make it possible to add Contact by
    -DONE Create Contact model with option to become a user later
    -DONE Create Contact form
    -DONE make contact form create user
- DONE Make it Possible to view contact list
-DONE Make it possible to view contact profile
-DONE Make it possible to edit/update contact detail
-DONE Make it possible to delete contact
- Make it possible to for staff and admin users to add comments/logactivities on contact
    -DONE Make log form with various activities
        -DONE Call, Email, Note, etc
    - Done Make it possible to Edit and Delete Comment
- DONE Make Tagging Possible
- Distingush backend staff users from clients portal
    -Decide on all pages that will be only accessed by staff users
    - Create cllient portal, only accessible by clients (front end)
    - Make Login possible but only staffs cans see backend and clients can only see client portal

    
- Make Segmentation/categorization possible
    -DONE Create a new app == segement
    -Create segment
        -Make it possible to create Segmentation
        -Make it possible to list segments
        -Make it possible to see all contacts in a segments
        -Make it possible to update and delete segments
    -DONE Make it possible to create tags in 
        -Make it possible to List all tags
        -Make it possible to see all contact in a tag
        -Make it possible to Update and delete tags
    -DONE make it possible to create status
    -DONE Make it possible to create services, traffic sourse, all in settings
    -DONE Make create/update form have multiple select for tags
    -DONE Make create/update form have options to add contact to tag by typing
    -DONE Make it possible to remove contact from tag in update section
- Make it possible to import data with mapping
- Make it possible to add additional field
- Deploy app to cloud for usage





Project
-Make Login page for all; Login leads to
    -Client Dashboard if Client
        -Shows 3 vertical tabes
            -Dashboad: showing Welcome to Dashboard
            -Your Details: Showing Customers Details
            -And Logout
    -Admin Dashboard of staff showing:
        -Total Number of Contacts
        -Add customer
        -View All contact

How to 
1.Make User groups (admin, staff, Contact)
2. Make Front end Login



Next to do
- How to automatically build
- How to deploy to python anywhere
- Dashboard analytics
    - Number of Contacts
    - Number of contacts who are Customer (status)
    - number of contacts who are customers not contacted for the past 1 week, 2weeks, 1 month, using last log activity
    - Last contacted(using last log)
    - number of contacts who are lead(status)
    - Number of contacts who are Customer(status) and unassigned
    - Number of contacts who are Customer and are not assigned
    - Total conversion per month (number of leads that were updated to customers)
    - 



CURRENT
- Make Front end Login (all login to front page)
- Done Make Registeration possible (all newly registered has a contact detail and user account - Contact role)
- Done For User ID 1
    - Auto Create roles
    - Make admin
    - Auto Create Basic services
    - Auto Create Traffic source
    - Auto Create basic Status: Leads, Prosepects, Contacts
- Done For other users 
    - Create User
        - Assign Contact role
    - Create Contact Details
    - Assign user to contact detail
    - Assign contact to Lead status

- DONE Make imported contact have hace contact status
- DONE Make thier tag and status become titled




- Make it possible to create contact without users account
- Make it possible to create user account from contact Details
- Make it possible to update user's first_name and last_name when contact first name and last name update using trigar


-DIFFERED Get all contacts with empty
    - Tag
    - status
    - Not assigned
    - No services
    - No Traffic source



Let it be that you can add contacts without having to add account. 
But you cannot add account without contact details
And you can create account from an already existing contact
Password rest from admin  end
password reset from contact end



